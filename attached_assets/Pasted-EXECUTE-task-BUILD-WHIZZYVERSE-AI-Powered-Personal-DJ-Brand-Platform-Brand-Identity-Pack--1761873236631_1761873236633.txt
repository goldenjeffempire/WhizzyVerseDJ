EXECUTE --task "BUILD WHIZZYVERSE: AI-Powered Personal DJ Brand Platform + Brand Identity Pack" \
--description "
Objective:
Develop a complete, interactive, demo-ready platform for DJ Whizzy ‚Äî titled **WhizzyVerse** ‚Äî built with a Python Django backend, Next.js frontend, and an AI-powered design system. 
Also, generate the **WhizzyVerse Brand Asset Pack**, including logo mock, color palette, hero image concept, and WhizBot avatar visual.

------------------------------------------------------------
# üåå PROJECT OVERVIEW
------------------------------------------------------------
Platform Name: WhizzyVerse  
Tagline: 'Step into the Sound Dimension'  
Identity: A fusion of sound, AI, and visual artistry.  
Purpose: Showcase DJ Whizzy‚Äôs music, events, and merch, with immersive fan interaction and AI-driven features.  
Target Output: Demo-ready prototype and brand presentation assets for client showcasing.

------------------------------------------------------------
# üß± CORE DELIVERABLES
------------------------------------------------------------
1. **Frontend:** Next.js + TailwindCSS + Framer Motion for fluid animations and futuristic UI.
2. **Backend:** Django (Python) + Django REST Framework (API) + SQLite (demo DB).
3. **AI Service:** FastAPI microservice 'WhizBot' ‚Äî DJ Whizzy‚Äôs AI fan assistant.
4. **Brand Asset Pack:** AI-generated logo mock, brand colors, typography system, hero image concept, and AI avatar of WhizBot.
5. **Deployment:** Frontend (Vercel), Backend (Render or Railway), Full Dockerized setup.
6. **Demo Presentation Mode:** Polished interactive flow for client pitch.

------------------------------------------------------------
# üñ•Ô∏è FRONTEND (Next.js + Tailwind + Framer Motion)
------------------------------------------------------------
Pages:
  ‚Ä¢ Landing Page ‚Äì Music-reactive animations, autoplay hero track, neon visuals.
  ‚Ä¢ Music Library ‚Äì List of Whizzy‚Äôs demo tracks with dynamic waveform player.
  ‚Ä¢ Events ‚Äì Upcoming and past shows with poster visuals and location map.
  ‚Ä¢ Merch Store ‚Äì Mock ecommerce showcase for branded items.
  ‚Ä¢ Chat Modal (WhizBot) ‚Äì Floating chat assistant powered by AI microservice.
  ‚Ä¢ Admin Dashboard (/admin-demo) ‚Äì Mock data visualizations for fan analytics.

Visual Aesthetics:
  - Dark neon theme: black backgrounds with electric cyan and deep purple.
  - Animated glow effects on hover.
  - Parallax scrolling and micro-interactions for an immersive flow.

------------------------------------------------------------
# ‚öôÔ∏è BACKEND (Python Django + Django REST Framework)
------------------------------------------------------------
Core APIs:
  GET /api/tracks/       ‚Üí Fetch demo tracks
  GET /api/events/       ‚Üí Fetch events
  GET /api/merch/        ‚Üí Fetch merch items
  POST /api/chat/        ‚Üí Route messages to AI service
  GET /api/analytics/    ‚Üí Mock fan data (track plays, chat count)
  POST /api/admin/login/ ‚Üí Demo authentication endpoint

Django Apps:
  - tracks       (models for audio library)
  - events       (gig listings and timelines)
  - merch        (store catalog)
  - analytics    (mock user metrics)
  - core         (base config, admin dashboard)
  - ai_connector (API bridge to FastAPI WhizBot)

Models:
  Track(id, title, genre, bpm, artwork, file_url)
  Event(id, name, date, venue, city, banner)
  MerchItem(id, name, price, image_url)
  Analytics(id, track_plays, chat_sessions, total_fans)

Security:
  - Django Auth
  - JWT for API endpoints
  - CORS + Helmet configuration
  - CSRF enabled for forms

------------------------------------------------------------
# ü§ñ AI SERVICE (FastAPI - WhizBot)
------------------------------------------------------------
Endpoints:
  POST /chat     ‚Üí Handle AI dialogue
  POST /train    ‚Üí Load Whizzy persona (tone, style, slang)
  POST /context  ‚Üí Extend knowledge base (lyrics, biography, event data)

Features:
  ‚Ä¢ Whizzy‚Äôs persona preloaded from JSON file (/seed/whizzy_persona.json)
  ‚Ä¢ Style: confident, cool, playful, fan-engaging tone
  ‚Ä¢ Fast local inference + GPT-4 fallback (via OPENAI_API_KEY)
  ‚Ä¢ Stores fan Q&A context locally for continuity

Example System Prompt:
  ‚ÄúYou are WhizBot ‚Äî the AI twin of DJ Whizzy. Speak with swagger, modern slang, and charisma. You love sound, beats, and fans. Stay authentic, never robotic.‚Äù

------------------------------------------------------------
# üé® WHIZZYVERSE BRAND ASSET PACK (AI-GENERATED)
------------------------------------------------------------
Auto-generate the following visual assets using AI design models:

1. **Logo Mock:**  
   - Concept: Stylized 'W' intertwined with waveform and vinyl disc motif.  
   - Colors: Neon Cyan (#00E0FF), Electric Purple (#7A00FF), Midnight Black (#0C0C0C).  
   - Output: Transparent PNG + SVG.

2. **Color Palette:**  
   - Primary: Neon Cyan (#00E0FF)  
   - Secondary: Deep Purple (#7A00FF)  
   - Accent: White (#FFFFFF)  
   - Background: Jet Black (#0C0C0C)  
   - Gradient: linear-gradient(90deg, #00E0FF, #7A00FF)

3. **Typography:**  
   - Headings: Orbitron (Futuristic)  
   - Body: Inter (Clean, Modern)

4. **Hero Image Concept:**  
   - A neon-lit DJ stage in a cyberpunk city skyline, holographic turntables, crowd energy.  
   - Tagline overlay: ‚ÄúStep into the Sound Dimension.‚Äù

5. **WhizBot AI Avatar Visual:**  
   - Semi-holographic humanoid DJ assistant with glowing headset, calm smile, neon blue eyes.  
   - Style: Futuristic, friendly, slightly robotic elegance.  
   - Formats: PNG (transparent), SVG (vector).

All generated visuals stored in `/brand_assets`:
  - logo_whizzyverse.png  
  - color_palette.json  
  - hero_concept.jpg  
  - whizbot_avatar.png  

------------------------------------------------------------
# üß© DATABASE + SEED DATA
------------------------------------------------------------
Database: SQLite (demo mode)
Seed files:
  - /seed/whizzy_tracks.json
  - /seed/whizzy_events.json
  - /seed/whizzy_merch.json
  - /seed/whizzy_persona.json

------------------------------------------------------------
# üß† DEMO FLOW (For Client Presentation)
------------------------------------------------------------
1Ô∏è‚É£ Load WhizzyVerse homepage ‚Äî animated visuals react to music.  
2Ô∏è‚É£ Chat with WhizBot ‚Äî responds in DJ Whizzy‚Äôs tone and humor.  
3Ô∏è‚É£ Explore Music Library ‚Äî waveform reacts to beat playback.  
4Ô∏è‚É£ Check Merch ‚Äî mock checkout flow.  
5Ô∏è‚É£ Visit Events ‚Äî past/future shows, tickets CTA.  
6Ô∏è‚É£ Admin logs in (/admin-demo) ‚Äî views mock fan analytics dashboard.  
7Ô∏è‚É£ Demo closes with hero animation and tagline: *‚ÄúYou‚Äôre in the Verse.‚Äù*

------------------------------------------------------------
# üß∞ TECH STACK SUMMARY
------------------------------------------------------------
Frontend: Next.js (TypeScript), TailwindCSS, Framer Motion  
Backend: Django + Django REST Framework  
AI Service: FastAPI (Python)  
Database: SQLite (Demo), Postgres (Optional for Prod)  
Deployment: Vercel (Frontend), Render/Railway (Backend)  
Containerization: Docker + docker-compose  
CI/CD: GitHub Actions

------------------------------------------------------------
# üîê ENV VARIABLES (.env.example)
------------------------------------------------------------
OPENAI_API_KEY=
DJANGO_SECRET_KEY=whizzyverse_secret
DATABASE_URL=sqlite:///whizzyverse.db
FRONTEND_URL=http://localhost:3000
BACKEND_URL=http://localhost:8000
AI_SERVICE_URL=http://localhost:7000

------------------------------------------------------------
# ‚úÖ ACCEPTANCE CRITERIA
------------------------------------------------------------
‚úî Fully functional Django backend with all API endpoints  
‚úî FastAPI AI service trained with Whizzy persona  
‚úî Next.js frontend responsive and interactive  
‚úî WhizBot chat functional (local + OpenAI fallback)  
‚úî Brand assets generated and exported  
‚úî Local Docker environment starts all services smoothly  
‚úî README includes setup, usage, and client demo guide

------------------------------------------------------------
# üì¶ FINAL DELIVERABLES
------------------------------------------------------------
üìÅ /frontend           ‚Üí Next.js app  
üìÅ /backend            ‚Üí Django app  
üìÅ /ai_service         ‚Üí FastAPI WhizBot  
üìÅ /brand_assets       ‚Üí Logo, palette, hero, WhizBot avatar  
üìÅ /seed               ‚Üí Demo content  
üìÅ /infra              ‚Üí Docker + CI/CD config  
üìÅ /deliverables       ‚Üí Demo video, PDF brand deck, README  

Commit Tag: v1.0-WhizzyVerse-DemoReady-Django
"
